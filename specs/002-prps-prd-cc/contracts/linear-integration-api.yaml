openapi: 3.0.0
info:
  title: CC-Boilerplate Linear Integration API
  version: 1.0.0
  description: API for Linear task management integration with AI competency scoring

paths:
  /linear/sync:
    post:
      summary: Sync issues with Linear
      operationId: syncLinear
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                direction:
                  type: string
                  enum: [pull, push, bidirectional]
                filter:
                  type: object
                  properties:
                    teamId:
                      type: string
                    projectId:
                      type: string
      responses:
        '200':
          description: Sync completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  synced:
                    type: integer
                  conflicts:
                    type: array
                    items:
                      type: string
                  timestamp:
                    type: string
                    format: date-time

  /linear/issues:
    get:
      summary: List Linear issues with competency scores
      operationId: listLinearIssues
      parameters:
        - name: assigneeType
          in: query
          schema:
            type: string
            enum: [human, ai, unassigned]
        - name: minCompetency
          in: query
          schema:
            type: number
            minimum: 0
            maximum: 1
      responses:
        '200':
          description: List of issues
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LinearIssue'

  /linear/issues/{issueId}/competency:
    post:
      summary: Calculate competency score for issue
      operationId: calculateCompetency
      parameters:
        - name: issueId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Competency assessment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompetencyAssessment'

  /linear/issues/{issueId}/assign:
    post:
      summary: Assign issue based on competency
      operationId: assignIssue
      parameters:
        - name: issueId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: [ai, human]
                agentName:
                  type: string
                  description: Required if type is 'ai'
                userId:
                  type: string
                  description: Required if type is 'human'
      responses:
        '200':
          description: Issue assigned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinearIssue'
        '403':
          description: Competency threshold not met

  /linear/webhook:
    post:
      summary: Receive Linear webhook events
      operationId: linearWebhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [create, update, delete]
                type:
                  type: string
                  enum: [issue, comment, project]
                data:
                  type: object
      responses:
        '200':
          description: Webhook processed
        '400':
          description: Invalid webhook payload

components:
  schemas:
    LinearIssue:
      type: object
      properties:
        id:
          type: string
        linearId:
          type: string
        title:
          type: string
        description:
          type: string
        state:
          type: string
          enum: [backlog, todo, in_progress, done, cancelled]
        assignee:
          type: object
          properties:
            type:
              type: string
              enum: [human, ai]
            id:
              type: string
            agent:
              type: string
        competency:
          $ref: '#/components/schemas/CompetencyScore'
        sync:
          type: object
          properties:
            lastSynced:
              type: string
              format: date-time
            version:
              type: integer
            conflicts:
              type: array
              items:
                type: string

    CompetencyScore:
      type: object
      properties:
        score:
          type: number
          minimum: 0
          maximum: 1
        confidence:
          type: number
          minimum: 0
          maximum: 1
        recommendedAgent:
          type: string
        factors:
          type: object
          properties:
            complexity:
              type: number
            domainMatch:
              type: number
            historicalSuccess:
              type: number

    CompetencyAssessment:
      type: object
      properties:
        issueId:
          type: string
        competency:
          $ref: '#/components/schemas/CompetencyScore'
        recommendation:
          type: string
          enum: [auto_assign_ai, suggest_ai, require_human]
        reasoning:
          type: string
        alternativeAgents:
          type: array
          items:
            type: object
            properties:
              agent:
                type: string
              score:
                type: number